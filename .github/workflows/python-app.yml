name: Python Application

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write

env:
  PYTHONUNBUFFERED: 1
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lock_file:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Update lockfile if needed
        uses: astral-sh/setup-uv@v5
        with:
          python-version: "3.13"
      - run: uv lock

  lint:
    runs-on: ubuntu-latest
    needs: [lock_file]
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/setup

    - name: Run linting and formatting checks
      shell: bash
      run: |
        source .venv/bin/activate
        ruff check .
        ruff format --check .

  test:
    runs-on: ubuntu-latest
    needs: [lock_file]
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/setup
      with:
        python-version: ${{ matrix.python-version }}

    - name: Run tests
      shell: bash
      run: |
        source .venv/bin/activate
        pytest --cov=src

  build-and-push:
    runs-on: ubuntu-latest
    needs: [lint, test]
    # Skip on pull requests, only run on push to main or tags
    if: github.event_name != 'pull_request'
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set Docker Tags
      id: set-tags
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "DOCKER_TAGS=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest,${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}" >> $GITHUB_ENV
        else
          echo "DOCKER_TAGS=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_ENV
        fi

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_TAGS }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Build Python distribution
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}